# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateDomain1Input {
  """domain1001"""
  domain1001: Int
}

type CreateDomain1Output {
  domain1: Domain1!
}

input CreateDomain2Input {
  """domain3s"""
  domain3s: [CreateDomain3Input!]!

  """domain2001"""
  domain2001: Int
}

type CreateDomain2Output {
  domain2: Domain2!
}

input CreateDomain3Input {
  """domain3001"""
  domain3001: Int
}

input CreateDomain4Input {
  """domain5s"""
  domain5s: [CreateDomain5Input!]!

  """domain4001"""
  domain4001: Int
}

type CreateDomain4Output {
  domain4: Domain4!
}

input CreateDomain5Input {
  """domain5001"""
  domain5001: Int
}

input CreateDomain6Input {
  """boolean"""
  domain6001: Boolean

  """int"""
  domain6002: Int

  """string"""
  domain6003: String

  """date"""
  domain6004: Date

  """decimal"""
  domain6005: Decimal

  """enum"""
  domain6006: Domain6StatusEnum

  """jsonb"""
  domain6007: JSONObject

  """json"""
  domain6008: JSONObject

  """Array<int>"""
  domain6011: [Int!]
}

type CreateDomain6Output {
  domain6: Domain6!
}

input CreateUserInput {
  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

type CreateUserOutput {
  user: User!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""A decimal string, such as 1.234, compliant with decimal.js format."""
scalar Decimal

type Domain1 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """domain1001"""
  domain1001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain1OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain1001"""
  domain1001: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC
}

type Domain1Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain1!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain1WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """domain1001"""
  domain1001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain2 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """OneToMany"""
  domain3s: [Domain3!]

  """domain2001"""
  domain2001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

interface Domain2Id {
  domain2: Domain2
  domain2Id: ID
}

type Domain3 implements Domain2Id & MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  domain2: Domain2!
  domain2Id: ID!

  """domain3001"""
  domain3001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Domain4 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """OneToMany"""
  domain5s: [Domain5!]

  """domain4001"""
  domain4001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain4OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain4001"""
  domain4001: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC
}

type Domain4Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain4!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain4WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """domain4001"""
  domain4001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain5 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """ManyToOne"""
  domain4: Domain4!

  """domain4Id"""
  domain4Id: ID!

  """domain5001"""
  domain5001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Domain6 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """boolean"""
  domain6001: Boolean

  """int"""
  domain6002: Int

  """string"""
  domain6003: String

  """date"""
  domain6004: Date

  """decimal"""
  domain6005: Decimal

  """enum"""
  domain6006: Domain6StatusEnum

  """jsonb"""
  domain6007: JSONObject

  """json"""
  domain6008: JSONObject

  """Array<int>"""
  domain6011: [Int!]
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain6OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """boolean"""
  domain6001: NodeOrderEnum

  """int"""
  domain6002: NodeOrderEnum

  """string"""
  domain6003: NodeOrderEnum

  """date"""
  domain6004: NodeOrderEnum

  """decimal"""
  domain6005: NodeOrderEnum

  """enum"""
  domain6006: NodeOrderEnum

  """jsonb"""
  domain6007: NodeOrderEnum

  """json"""
  domain6008: NodeOrderEnum

  """Array<int>"""
  domain6011: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC
}

type Domain6Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain6!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

"""status"""
enum Domain6StatusEnum {
  ACTIVE
  INACTIVE
}

input Domain6WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """boolean"""
  domain6001: Boolean

  """int"""
  domain6002: Int

  """string"""
  domain6003: String

  """date"""
  domain6004: Date

  """enum"""
  domain6006: Domain6StatusEnum
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

interface MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Mutation {
  createDomain1(input: CreateDomain1Input!): CreateDomain1Output!
  createDomain2(input: CreateDomain2Input!): CreateDomain2Output!
  createDomain4(input: CreateDomain4Input!): CreateDomain4Output!
  createDomain6(input: CreateDomain6Input!): CreateDomain6Output!
  createUser(createUserInput: CreateUserInput!): CreateUserOutput!
  removeDomain1(input: RemoveDomain1Input!): RemoveDomain1Output!
  removeDomain4(input: RemoveDomain4Input!): RemoveDomain4Output!
  removeDomain6(input: RemoveDomain6Input!): RemoveDomain6Output!
  removeUser(input: RemoveUserInput!): RemoveUserOutput!
  signIn(input: SignInInput!): SignInOutput!
  updateDomain1(input: UpdateDomain1Input!): UpdateDomain1Output!
  updateDomain2(input: UpdateDomain2Input!): UpdateDomain2Output!
  updateDomain2s(input: UpdateDomain2sInput!): UpdateDomain2sOutput!
  updateDomain4(input: UpdateDomain4Input!): UpdateDomain4Output!
  updateDomain6(input: UpdateDomain6Input!): UpdateDomain6Output!
  updateUser(input: UpdateUserInput!): UpdateUserOutput!
}

"""排序方式"""
enum NodeOrderEnum {
  """升冪"""
  ASC

  """降冪"""
  DESC
}

interface NodePage {
  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type Query {
  domain1(id: ID!): Domain1!
  domain1Page(
    """排序欄位與方式"""
    order: Domain1OrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain1WhereInput!]
  ): Domain1Page!
  domain4(id: ID!): Domain4!
  domain4Page(
    """排序欄位與方式"""
    order: Domain4OrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain4WhereInput!]
  ): Domain4Page!
  domain6(id: ID!): Domain6!
  domain6Page(
    """排序欄位與方式"""
    order: Domain6OrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain6WhereInput!]
  ): Domain6Page!
  me: User
  user(id: ID!): User!
  userPage(
    """排序欄位與方式"""
    order: UserOrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [UserWhereInput!]
  ): UserPage!
}

input RemoveDomain1Input {
  id: ID!
}

type RemoveDomain1Output {
  domain1: Domain1!
}

input RemoveDomain4Input {
  id: ID!
}

type RemoveDomain4Output {
  domain4: Domain4!
}

input RemoveDomain6Input {
  id: ID!
}

type RemoveDomain6Output {
  domain6: Domain6!
}

input RemoveUserInput {
  id: ID!
}

type RemoveUserOutput {
  user: User!
}

input SignInInput {
  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

type SignInOutput {
  access_token: String!
}

input UpdateDomain1Input {
  """domain1001"""
  domain1001: Int
  id: ID!
}

type UpdateDomain1Output {
  domain1: Domain1!
}

input UpdateDomain2Input {
  """domain3s"""
  domain3s: [UpdateDomain3Input!]

  """domain2001"""
  domain2001: Int
  id: ID!
}

type UpdateDomain2Output {
  domain2: Domain2!
}

input UpdateDomain2sInput {
  """domain2s"""
  domain2s: [UpdateDomain2Input!]!
}

type UpdateDomain2sOutput {
  domain2s: [Domain2!]!
}

input UpdateDomain3Input {
  """domain3001"""
  domain3001: Int
  id: ID!
}

input UpdateDomain4Input {
  """domain5s"""
  domain5s: [UpdateDomain5Input!]!

  """domain4001"""
  domain4001: Int
  id: ID!
}

type UpdateDomain4Output {
  domain4: Domain4!
}

input UpdateDomain5Input {
  """domain5001"""
  domain5001: Int
  id: ID!
}

input UpdateDomain6Input {
  """boolean"""
  domain6001: Boolean

  """int"""
  domain6002: Int

  """string"""
  domain6003: String

  """date"""
  domain6004: Date

  """decimal"""
  domain6005: Decimal

  """enum"""
  domain6006: Domain6StatusEnum

  """jsonb"""
  domain6007: JSONObject

  """json"""
  domain6008: JSONObject

  """Array<int>"""
  domain6011: [Int!]
  id: ID!
}

type UpdateDomain6Output {
  domain6: Domain6!
}

input UpdateUserInput {
  id: ID!

  """user001"""
  user001: Int

  """user002"""
  user002: Int
}

type UpdateUserOutput {
  user: User!
}

type User implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID

  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

input UserOrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC

  """user001"""
  user001: NodeOrderEnum

  """user002"""
  user002: NodeOrderEnum
}

type UserPage implements NodePage {
  """Nodes in this page"""
  nodes: [User!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input UserWhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID
  id: ID
  updatedAt: DateTime
  updatedUserId: ID

  """user001"""
  user001: Int

  """user002"""
  user002: Int
}