# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateDomain1Input {
  """domain1001"""
  domain1001: Int!
}

type CreateDomain1Output {
  domain1: Domain1!
}

input CreateUserInput {
  """user001"""
  user001: Int!
}

type CreateUserOutput {
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Domain1 {
  """domain1001"""
  domain1001: Int

  """id"""
  id: Int!
}

interface MetaEntity {
  createUser: User
  createUserId: ID
  createdAt: DateTime!
  deleteUser: User
  deleteUserId: ID
  deletedAt: DateTime
  id: ID!
  updateUser: User
  updateUserId: ID
  updatedAt: DateTime!
}

type Mutation {
  createDomain1(createDomain1Input: CreateDomain1Input!): CreateDomain1Output!
  createUser(createUserInput: CreateUserInput!): CreateUserOutput!
  removeDomain1(id: Int!): RemoveDomain1Output!
  removeUser(input: RemoveUserInput!): RemoveUserOutput!
  signIn(input: SignInInput!): SignInOutput!
  updateDomain1(updateDomain1Input: UpdateDomain1Input!): UpdateDomain1Output!
  updateUser(input: UpdateUserInput!): UpdateUserOutput!
}

"""排序方式"""
enum NodeOrderEnum {
  """升冪"""
  ASC

  """降冪"""
  DESC
}

interface NodePage {
  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type Query {
  domain1(id: Int!): Domain1!
  domain1s: [Domain1!]!
  me: User
  user(id: ID!): User!
  userPage(
    """排序欄位與方式"""
    order: UserOrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: UserWhereInput! = {}
  ): UserPage!
}

type RemoveDomain1Output {
  domain1: Domain1!
}

input RemoveUserInput {
  id: ID!
}

type RemoveUserOutput {
  user: User!
}

input SignInInput {
  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

type SignInOutput {
  access_token: String!
}

input UpdateDomain1Input {
  """domain1001"""
  domain1001: Int
  id: Int!
}

type UpdateDomain1Output {
  domain1: Domain1!
}

input UpdateUserInput {
  id: ID!

  """user001"""
  user001: Int
}

type UpdateUserOutput {
  user: User!
}

type User implements MetaEntity {
  createUser: User
  createUserId: ID
  createdAt: DateTime!
  deleteUser: User
  deleteUserId: ID
  deletedAt: DateTime
  id: ID!
  updateUser: User
  updateUserId: ID
  updatedAt: DateTime!

  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

input UserOrderInput {
  createdAt: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC
}

type UserPage implements NodePage {
  """Nodes in this page"""
  nodes: [User!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input UserWhereInput {
  """Example Field"""
  id: String
}