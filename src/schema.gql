# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateDomain0001Input {
  """domain0001001"""
  domain0001001: Int
}

type CreateDomain0001Output {
  domain0001: Domain0001!
}

input CreateDomain0003Input {
  """boolean"""
  domain0003001: Boolean

  """int"""
  domain0003002: Int

  """varchar"""
  domain0003003: String

  """date"""
  domain0003004: Date

  """decimal"""
  domain0003005: Decimal

  """enum"""
  domain0003006: Domain0003StatusEnum

  """jsonb"""
  domain0003007: JSONObject

  """json"""
  domain0003008: JSONObject

  """Array<int>"""
  domain0003011: [Int!]
}

type CreateDomain0003Output {
  domain0003: Domain0003!
}

input CreateDomain0005Input {
  """domain0006s"""
  domain0006s: [CreateDomain0006Input!]!

  """domain0005001"""
  domain0005001: Int
}

type CreateDomain0005Output {
  domain0005: Domain0005!
}

input CreateDomain0006Input {
  """domain0006001"""
  domain0006001: Int
}

input CreateDomain0008Input {
  """domain0009s"""
  domain0009s: [CreateDomain0009Input!]!

  """domain0008001"""
  domain0008001: Int
}

type CreateDomain0008Output {
  domain0008: Domain0008!
}

input CreateDomain0009Input {
  """domain0009001"""
  domain0009001: Int

  """domain0010s"""
  domain0010s: [CreateDomain0010Input!]!
}

input CreateDomain0010Input {
  """domain0010001"""
  domain0010001: Int
}

input CreateDomain0015Input {
  """domain0015001"""
  domain0015001: Int
}

type CreateDomain0015Output {
  domain0015: Domain0015!
}

input CreateUserInput {
  email: String!
  password: String!
}

type CreateUserOutput {
  user: User!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""A decimal string, such as 1.234, compliant with decimal.js format."""
scalar Decimal

type Domain0001 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """domain0001001"""
  domain0001001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0001OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain0001001"""
  domain0001001: NodeOrderEnum
  updatedAt: NodeOrderEnum
}

type Domain0001Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0001!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain0001WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """domain0001001"""
  domain0001001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain0003 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """boolean"""
  domain0003001: Boolean

  """int"""
  domain0003002: Int

  """varchar"""
  domain0003003: String

  """date"""
  domain0003004: Date

  """decimal"""
  domain0003005: Decimal

  """enum"""
  domain0003006: Domain0003StatusEnum

  """jsonb"""
  domain0003007: JSONObject

  """json"""
  domain0003008: JSONObject

  """VirtualColumn"""
  domain0003009: Int!

  """Array<int>"""
  domain0003011: [Int!]
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0003OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """boolean"""
  domain0003001: NodeOrderEnum

  """int"""
  domain0003002: NodeOrderEnum

  """varchar"""
  domain0003003: NodeOrderEnum

  """date"""
  domain0003004: NodeOrderEnum

  """decimal"""
  domain0003005: NodeOrderEnum

  """enum"""
  domain0003006: NodeOrderEnum

  """jsonb"""
  domain0003007: NodeOrderEnum

  """json"""
  domain0003008: NodeOrderEnum

  """VirtualColumn"""
  domain0003009: NodeOrderEnum

  """Array<int>"""
  domain0003011: NodeOrderEnum
  updatedAt: NodeOrderEnum
}

type Domain0003Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0003!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

"""status"""
enum Domain0003StatusEnum {
  ACTIVE
  INACTIVE
}

input Domain0003WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """boolean"""
  domain0003001: Boolean

  """int"""
  domain0003002: Int

  """varchar"""
  domain0003003: String

  """date"""
  domain0003004: Date

  """enum"""
  domain0003006: Domain0003StatusEnum

  """VirtualColumn"""
  domain0003009: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain0005 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  domain0006Page(
    """排序欄位與方式"""
    order: Domain0006OrderInput! = {}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0006WhereInput!]
  ): Domain0006Page!

  """OneToMany"""
  domain0006s: [Domain0006!]

  """domain0005001"""
  domain0005001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0005OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain0005001"""
  domain0005001: NodeOrderEnum
  updatedAt: NodeOrderEnum
}

type Domain0005Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0005!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain0005WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID
  domain0006s: Domain0006WhereInput

  """domain0005001"""
  domain0005001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain0006 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """ManyToOne"""
  domain0005: Domain0005!

  """domain0005Id"""
  domain0005Id: ID!

  """OneToMany"""
  domain0007s: [Domain0007!]

  """domain0006001"""
  domain0006001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0006OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain0005Id"""
  domain0005Id: NodeOrderEnum

  """domain0006001"""
  domain0006001: NodeOrderEnum
  updatedAt: NodeOrderEnum
}

type Domain0006Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0006!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain0006WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """domain0005Id"""
  domain0005Id: ID

  """domain0006001"""
  domain0006001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain0007 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """ManyToOne"""
  domain0006: Domain0006!

  """domain0006Id"""
  domain0006Id: ID!

  """domain0007001"""
  domain0007001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Domain0008 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """OneToMany"""
  domain0009s: [Domain0009!]!

  """domain0008001"""
  domain0008001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0008OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain0008001"""
  domain0008001: NodeOrderEnum
  updatedAt: NodeOrderEnum
}

type Domain0008Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0008!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain0008WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """domain0008001"""
  domain0008001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain0009 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  domain0008: Domain0008!
  domain0008Id: ID!

  """domain0009001"""
  domain0009001: Int

  """OneToMany"""
  domain0010s: [Domain0010!]!
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

interface Domain0009ById {
  domain0009: Domain0009
  domain0009Id: ID
}

type Domain0010 implements Domain0009ById & MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  domain0009: Domain0009!
  domain0009Id: ID!

  """domain0010001"""
  domain0010001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Domain0015 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """domain0015001"""
  domain0015001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type ErrorType {
  customAuthenticationError: Boolean
  queryFailedError: Boolean
  typeORMError: Boolean
  unknownError: Boolean
  validatorError: Boolean
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

interface MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Mutation {
  createDomain0001(input: CreateDomain0001Input!): CreateDomain0001Output!
  createDomain0003(input: CreateDomain0003Input!): CreateDomain0003Output!
  createDomain0005(input: CreateDomain0005Input!): CreateDomain0005Output!
  createDomain0008(input: CreateDomain0008Input!): CreateDomain0008Output!
  createDomain0015(input: CreateDomain0015Input!): CreateDomain0015Output!
  createUser(input: CreateUserInput!): CreateUserOutput!
  removeDomain0001(input: RemoveDomain0001Input!): RemoveDomain0001Output!
  removeDomain0003(input: RemoveDomain0003Input!): RemoveDomain0003Output!
  removeDomain0005(input: RemoveDomain0005Input!): RemoveDomain0005Output!
  removeDomain0008(input: RemoveDomain0008Input!): RemoveDomain0008Output!
  removeUser(input: RemoveUserInput!): RemoveUserOutput!
  signIn(input: SignInInput!): SignInOutput!
  softRemoveDomain0005(input: SoftRemoveDomain0005Input!): SoftRemoveDomain0005Output!
  testQueueEventsRaceCondition(input: CreateDomain0015Input!): CreateDomain0015Output!
  updateDomain0001(input: UpdateDomain0001Input!): UpdateDomain0001Output!
  updateDomain0003(input: UpdateDomain0003Input!): UpdateDomain0003Output!
  updateDomain0005(input: UpdateDomain0005Input!): UpdateDomain0005Output!
  updateDomain0008(input: UpdateDomain0008Input!): UpdateDomain0008Output!
  updateDomain0008s(input: UpdateDomain0008sInput!): UpdateDomain0008sOutput!
  updateUser(input: UpdateUserInput!): UpdateUserOutput!
}

"""排序方式"""
enum NodeOrderEnum {
  """升冪"""
  ASC

  """降冪"""
  DESC
}

interface NodePage {
  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type Permission implements MetaEntity {
  action: PermissionActionEnum!
  conditions: JSONObject
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  id: ID!

  """角色"""
  roles: [Role!]
  subject: String!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

enum PermissionActionEnum {
  CREATE
  DELETE
  MANAGE
  READ
  UPDATE
}

type Query {
  domain0001(id: ID!): Domain0001!
  domain0001Page(
    """排序欄位與方式"""
    order: Domain0001OrderInput! = {}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0001WhereInput!]
  ): Domain0001Page!
  domain0003(id: ID!): Domain0003!
  domain0003Page(
    """排序欄位與方式"""
    order: Domain0003OrderInput! = {}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0003WhereInput!]
  ): Domain0003Page!
  domain0005(id: ID!): Domain0005!
  domain0005Page(
    """排序欄位與方式"""
    order: Domain0005OrderInput! = {}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0005WhereInput!]
  ): Domain0005Page!
  domain0008(id: ID!): Domain0008!
  domain0008Page(
    """排序欄位與方式"""
    order: Domain0008OrderInput! = {}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0008WhereInput!]
  ): Domain0008Page!
  error: ErrorType!
  me: User
  user(id: ID!): User!
  userPage(
    """排序欄位與方式"""
    order: UserOrderInput! = {}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [UserWhereInput!]
  ): UserPage!
}

input RemoveDomain0001Input {
  id: ID!
}

type RemoveDomain0001Output {
  domain0001: Domain0001!
}

input RemoveDomain0003Input {
  id: ID!
}

type RemoveDomain0003Output {
  domain0003: Domain0003!
}

input RemoveDomain0005Input {
  id: ID!
}

type RemoveDomain0005Output {
  domain0005: Domain0005!
}

input RemoveDomain0008Input {
  id: ID!
}

type RemoveDomain0008Output {
  domain0008: Domain0008!
}

input RemoveUserInput {
  id: ID!
}

type RemoveUserOutput {
  user: User!
}

type Role implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  id: ID!

  """角色名稱"""
  name: String!

  """權限"""
  permissions: [Permission!]
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input SignInInput {
  email: String!
  password: String!
}

type SignInOutput {
  access_token: String!
}

input SoftRemoveDomain0005Input {
  id: ID!
}

type SoftRemoveDomain0005Output {
  domain0005: Domain0005!
}

input UpdateDomain0001Input {
  """domain0001001"""
  domain0001001: Int
  id: ID!
}

type UpdateDomain0001Output {
  domain0001: Domain0001!
}

input UpdateDomain0003Input {
  """boolean"""
  domain0003001: Boolean

  """int"""
  domain0003002: Int

  """varchar"""
  domain0003003: String

  """date"""
  domain0003004: Date

  """decimal"""
  domain0003005: Decimal

  """enum"""
  domain0003006: Domain0003StatusEnum

  """jsonb"""
  domain0003007: JSONObject

  """json"""
  domain0003008: JSONObject

  """Array<int>"""
  domain0003011: [Int!]
  id: ID!
}

type UpdateDomain0003Output {
  domain0003: Domain0003!
}

input UpdateDomain0005Input {
  """domain0006s"""
  domain0006s: [UpdateDomain0006Input!]

  """domain0005001"""
  domain0005001: Int
  id: ID
}

type UpdateDomain0005Output {
  domain0005: Domain0005!
}

input UpdateDomain0006Input {
  """domain0006001"""
  domain0006001: Int
  id: ID
}

input UpdateDomain0008Input {
  """domain0009s"""
  domain0009s: [UpdateDomain0009Input!]

  """domain0008001"""
  domain0008001: Int
  id: ID!
}

type UpdateDomain0008Output {
  domain0008: Domain0008!
}

input UpdateDomain0008sInput {
  """domain0008s"""
  domain0008s: [UpdateDomain0008Input!]!
}

type UpdateDomain0008sOutput {
  domain0008s: [Domain0008!]!
}

input UpdateDomain0009Input {
  """domain0009001"""
  domain0009001: Int

  """domain0010s"""
  domain0010s: [UpdateDomain0010Input!]
  id: ID!
}

input UpdateDomain0010Input {
  """domain0010001"""
  domain0010001: Int
  id: ID!
}

input UpdateUserInput {
  email: String
  id: ID!
  password: String
}

type UpdateUserOutput {
  user: User!
}

type User implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  email: String!
  id: ID!

  """角色"""
  roles: [Role!]
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input UserOrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum
  email: NodeOrderEnum
  updatedAt: NodeOrderEnum
}

type UserPage implements NodePage {
  """Nodes in this page"""
  nodes: [User!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input UserWhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID
  email: String
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}