# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateDomain0001Input {
  """domain0001001"""
  domain0001001: Int
}

type CreateDomain0001Output {
  domain0001: Domain0001!
}

input CreateDomain0002Input {
  """domain0003s"""
  domain0003s: [CreateDomain0003Input!]!

  """domain0002001"""
  domain0002001: Int
}

type CreateDomain0002Output {
  domain0002: Domain0002!
}

input CreateDomain0003Input {
  """domain0003001"""
  domain0003001: Int
}

input CreateDomain0004Input {
  """domain0005s"""
  domain0005s: [CreateDomain0005Input!]!

  """domain0004001"""
  domain0004001: Int
}

type CreateDomain0004Output {
  domain0004: Domain0004!
}

input CreateDomain0005Input {
  """domain0005001"""
  domain0005001: Int
}

input CreateDomain0006Input {
  """boolean"""
  domain0006001: Boolean

  """int"""
  domain0006002: Int

  """string"""
  domain0006003: String

  """date"""
  domain0006004: Date

  """decimal"""
  domain0006005: Decimal

  """enum"""
  domain0006006: Domain0006StatusEnum

  """jsonb"""
  domain0006007: JSONObject

  """json"""
  domain0006008: JSONObject

  """Array<int>"""
  domain0006011: [Int!]
}

type CreateDomain0006Output {
  domain0006: Domain0006!
}

input CreateUserInput {
  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

type CreateUserOutput {
  user: User!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""A decimal string, such as 1.234, compliant with decimal.js format."""
scalar Decimal

type Domain0001 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """domain0001001"""
  domain0001001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0001OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain0001001"""
  domain0001001: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC
}

type Domain0001Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0001!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain0001WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """domain0001001"""
  domain0001001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain0002 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """OneToMany"""
  domain0003s: [Domain0003!]

  """domain0002001"""
  domain0002001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

interface Domain0002Id {
  domain0002: Domain0002
  domain0002Id: ID
}

type Domain0003 implements Domain0002Id & MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  domain0002: Domain0002!
  domain0002Id: ID!

  """domain0003001"""
  domain0003001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Domain0004 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """OneToMany"""
  domain0005s: [Domain0005!]

  """domain0004001"""
  domain0004001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0004OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """domain0004001"""
  domain0004001: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC
}

type Domain0004Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0004!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input Domain0004WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """domain0004001"""
  domain0004001: Int
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

type Domain0005 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """ManyToOne"""
  domain0004: Domain0004!

  """domain0004Id"""
  domain0004Id: ID!

  """domain0005001"""
  domain0005001: Int
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Domain0006 implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID

  """boolean"""
  domain0006001: Boolean

  """int"""
  domain0006002: Int

  """string"""
  domain0006003: String

  """date"""
  domain0006004: Date

  """decimal"""
  domain0006005: Decimal

  """enum"""
  domain0006006: Domain0006StatusEnum

  """jsonb"""
  domain0006007: JSONObject

  """json"""
  domain0006008: JSONObject

  """Array<int>"""
  domain0006011: [Int!]
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

input Domain0006OrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum

  """boolean"""
  domain0006001: NodeOrderEnum

  """int"""
  domain0006002: NodeOrderEnum

  """string"""
  domain0006003: NodeOrderEnum

  """date"""
  domain0006004: NodeOrderEnum

  """decimal"""
  domain0006005: NodeOrderEnum

  """enum"""
  domain0006006: NodeOrderEnum

  """jsonb"""
  domain0006007: NodeOrderEnum

  """json"""
  domain0006008: NodeOrderEnum

  """Array<int>"""
  domain0006011: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC
}

type Domain0006Page implements NodePage {
  """Nodes in this page"""
  nodes: [Domain0006!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

"""status"""
enum Domain0006StatusEnum {
  ACTIVE
  INACTIVE
}

input Domain0006WhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID

  """boolean"""
  domain0006001: Boolean

  """int"""
  domain0006002: Int

  """string"""
  domain0006003: String

  """date"""
  domain0006004: Date

  """enum"""
  domain0006006: Domain0006StatusEnum
  id: ID
  updatedAt: DateTime
  updatedUserId: ID
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

interface MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID
}

type Mutation {
  createDomain0001(input: CreateDomain0001Input!): CreateDomain0001Output!
  createDomain0002(input: CreateDomain0002Input!): CreateDomain0002Output!
  createDomain0004(input: CreateDomain0004Input!): CreateDomain0004Output!
  createDomain0006(input: CreateDomain0006Input!): CreateDomain0006Output!
  createUser(createUserInput: CreateUserInput!): CreateUserOutput!
  removeDomain0001(input: RemoveDomain0001Input!): RemoveDomain0001Output!
  removeDomain0004(input: RemoveDomain0004Input!): RemoveDomain0004Output!
  removeDomain0006(input: RemoveDomain0006Input!): RemoveDomain0006Output!
  removeUser(input: RemoveUserInput!): RemoveUserOutput!
  signIn(input: SignInInput!): SignInOutput!
  updateDomain0001(input: UpdateDomain0001Input!): UpdateDomain0001Output!
  updateDomain0002(input: UpdateDomain0002Input!): UpdateDomain0002Output!
  updateDomain0002s(input: UpdateDomain0002sInput!): UpdateDomain0002sOutput!
  updateDomain0004(input: UpdateDomain0004Input!): UpdateDomain0004Output!
  updateDomain0006(input: UpdateDomain0006Input!): UpdateDomain0006Output!
  updateUser(input: UpdateUserInput!): UpdateUserOutput!
}

"""排序方式"""
enum NodeOrderEnum {
  """升冪"""
  ASC

  """降冪"""
  DESC
}

interface NodePage {
  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type Query {
  domain0001(id: ID!): Domain0001!
  domain0001Page(
    """排序欄位與方式"""
    order: Domain0001OrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0001WhereInput!]
  ): Domain0001Page!
  domain0004(id: ID!): Domain0004!
  domain0004Page(
    """排序欄位與方式"""
    order: Domain0004OrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0004WhereInput!]
  ): Domain0004Page!
  domain0006(id: ID!): Domain0006!
  domain0006Page(
    """排序欄位與方式"""
    order: Domain0006OrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [Domain0006WhereInput!]
  ): Domain0006Page!
  me: User
  user(id: ID!): User!
  userPage(
    """排序欄位與方式"""
    order: UserOrderInput! = {updatedAt: DESC}

    """Amount of nodes to skip from the beginning of this page"""
    skip: NonNegativeInt

    """Maximum amount of nodes in this page"""
    take: NonNegativeInt

    """查詢條件"""
    where: [UserWhereInput!]
  ): UserPage!
}

input RemoveDomain0001Input {
  id: ID!
}

type RemoveDomain0001Output {
  domain0001: Domain0001!
}

input RemoveDomain0004Input {
  id: ID!
}

type RemoveDomain0004Output {
  domain0004: Domain0004!
}

input RemoveDomain0006Input {
  id: ID!
}

type RemoveDomain0006Output {
  domain0006: Domain0006!
}

input RemoveUserInput {
  id: ID!
}

type RemoveUserOutput {
  user: User!
}

input SignInInput {
  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

type SignInOutput {
  access_token: String!
}

input UpdateDomain0001Input {
  """domain0001001"""
  domain0001001: Int
  id: ID!
}

type UpdateDomain0001Output {
  domain0001: Domain0001!
}

input UpdateDomain0002Input {
  """domain0003s"""
  domain0003s: [UpdateDomain0003Input!]

  """domain0002001"""
  domain0002001: Int
  id: ID!
}

type UpdateDomain0002Output {
  domain0002: Domain0002!
}

input UpdateDomain0002sInput {
  """domain0002s"""
  domain0002s: [UpdateDomain0002Input!]!
}

type UpdateDomain0002sOutput {
  domain0002s: [Domain0002!]!
}

input UpdateDomain0003Input {
  """domain0003001"""
  domain0003001: Int
  id: ID!
}

input UpdateDomain0004Input {
  """domain0005s"""
  domain0005s: [UpdateDomain0005Input!]!

  """domain0004001"""
  domain0004001: Int
  id: ID!
}

type UpdateDomain0004Output {
  domain0004: Domain0004!
}

input UpdateDomain0005Input {
  """domain0005001"""
  domain0005001: Int
  id: ID!
}

input UpdateDomain0006Input {
  """boolean"""
  domain0006001: Boolean

  """int"""
  domain0006002: Int

  """string"""
  domain0006003: String

  """date"""
  domain0006004: Date

  """decimal"""
  domain0006005: Decimal

  """enum"""
  domain0006006: Domain0006StatusEnum

  """jsonb"""
  domain0006007: JSONObject

  """json"""
  domain0006008: JSONObject

  """Array<int>"""
  domain0006011: [Int!]
  id: ID!
}

type UpdateDomain0006Output {
  domain0006: Domain0006!
}

input UpdateUserInput {
  id: ID!

  """user001"""
  user001: Int

  """user002"""
  user002: Int
}

type UpdateUserOutput {
  user: User!
}

type User implements MetaEntity {
  createdAt: DateTime!
  createdUser: User
  createdUserId: ID
  deletedAt: DateTime
  deletedUser: User
  deletedUserId: ID
  id: ID!
  updatedAt: DateTime!
  updatedUser: User
  updatedUserId: ID

  """user001"""
  user001: Int!

  """user002"""
  user002: Int!
}

input UserOrderInput {
  createdAt: NodeOrderEnum
  deletedAt: NodeOrderEnum
  updatedAt: NodeOrderEnum = DESC

  """user001"""
  user001: NodeOrderEnum

  """user002"""
  user002: NodeOrderEnum
}

type UserPage implements NodePage {
  """Nodes in this page"""
  nodes: [User!]!

  """Amount of nodes to skip from the beginning of this page"""
  skip: NonNegativeInt

  """Maximum amount of nodes in this page"""
  take: NonNegativeInt

  """Total amount of nodes"""
  total: NonNegativeInt
}

input UserWhereInput {
  createdAt: DateTime
  createdUserId: ID
  deletedAt: DateTime
  deletedUserId: ID
  id: ID
  updatedAt: DateTime
  updatedUserId: ID

  """user001"""
  user001: Int

  """user002"""
  user002: Int
}